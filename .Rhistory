#install.packages(c("e1071", "caret", "doSNOW", "ipred", "xgboost"))
library(caret)
library(doSNOW)
#=================================================================
# Load Data
#=================================================================
train <- read.csv("train.csv", stringsAsFactors = FALSE)
View(train)
#=================================================================
# Data Wrangling
#=================================================================
# Replace missing embarked values with mode.
table(train$Embarked)
train$Embarked[train$Embarked == ""] <- "S"
# Add a feature for tracking missing ages.
summary(train$Age)
train$MissingAge <- ifelse(is.na(train$Age),
"Y", "N")
# Add a feature for family size.
train$FamilySize <- 1 + train$SibSp + train$Parch
View(train)
train$Survived <- as.factor(train$Survived)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
train$Embarked <- as.factor(train$Embarked)
train$MissingAge <- as.factor(train$MissingAge)
summary(train)
features <- c("Survived", "Pclass", "Sex", "Age", "SibSp",
"Parch", "Fare", "Embarked", "MissingAge",
"FamilySize")
train <- train[, features]
str(train)
View(train)
# First, transform all feature to dummy variables.
dummy.vars <- dummyVars(~ ., data = train[, -1])
View(dummy.vars)
train.dummy <- predict(dummy.vars, train[, -1])
View(train.dummy)
?preProcess
pre.process <- preProcess(train.dummy, method = "bagImpute")
imputed.data <- predict(pre.process, train.dummy)
View(imputed.data)
train$Age <- imputed.data[, 6]
View(train)
set.seed(54321)
indexes <- createDataPartition(train$Survived,
times = 1,
p = 0.7,
list = FALSE)
index
indexes
titanic.train <- train[indexes,]
titanic.test <- train[-indexes,]
View(titanic.train)
str(titanic.train)
# Examine the proportions of the Survived class lable across
# the datasets.
prop.table(table(train$Survived))
prop.table(table(titanic.train$Survived))
prop.table(table(titanic.test$Survived))
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 6:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
View(tune.grid)
# Use the doSNOW package to enable caret to train in parallel.
# While there are many package options in this space, doSNOW
# has the advantage of working on both Windows and Mac OS X.
#
# Create a socket cluster using 10 processes. | I (Orry) changed this to fewer cores
#
# NOTE - Tune this number based on the number of cores/threads
# available on your machine!!!
#
cl <- makeCluster(5, type = "SOCK")
# Register cluster so that caret will know to train in parallel.
registerDoSNOW(cl)
caret.cv <- train(Survived ~ .,
data = titanic.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
caret.cv <- train(Survived ~ .,
data = titanic.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
# Make predictions on the test set using a xgboost model
# trained on all 625 rows of the training set using the
# found optimal hyperparameter values.
preds <- predict(caret.cv, titanic.test)
# Use caret's confusionMatrix() function to estimate the
# effectiveness of this model on unseen, new data.
confusionMatrix(preds, titanic.test$Survived)
